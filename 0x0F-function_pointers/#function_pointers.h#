#include <stdlib.h>
#include <stdio.h>
#include "3-calc.h"
/**
 * main - Prints the result of simple operations.
 * @argc: The number of arguments supplied to the program.
 * @argv: An array of pointers to the arguments.
 *
 * Return: Always 0.
 */
int main(int __attribute__((__unused__)) argc, char *argv[])
{
  int num1, num2;
  char *op;


  if (argc != 4)
    {
      printf("Error\n");
      exit(98);
    }


  num1 = atoi(argv[1]);
  op = argv[2];
  num2 = atoi(argv[3]);


  if (get_op_func(op) == NULL || op[1] != '\0')
    {
      printf("Error\n");
      exit(99);
    }


  if ((*op == '/' && num2 == 0) ||
      (*op == '%' && num2 == 0))
    {
      printf("Error\n");
      exit(100);
    }


  printf("%d\n", get_op_func(op)(num1, num2));


  return (0);
}0;276;0c#include "function_pointers.h"
#include <stdlib.h>
#include <stdio.h>
#include "3-calc.h"
/**
* main - Prints the result of simple operations.
* @argc: The number of arguments supplied to the program.
* @argv: An array of pointers to the arguments.
*
* Return: Always 0.
*/
int main(int __attribute__((__unused__)) argc, char *argv[])
{
int num1, num2;
char *op;


if (argc != 4)
{
printf("Error\n");
exit(98);
}


num1 = atoi(argv[1]);
op = argv[2];
num2 = atoi(argv[3]);


if (get_op_func(op) == NULL || op[1] != '\0')
{
printf("Error\n");
exit(99);
}


if ((*op == '/' && num2 == 0) ||
(*op == '%' && num2 == 0))
{
printf("Error\n");
exit(100);
}


printf("%d\n", get_op_func(op)(num1, num2));


return (0);
}#ifndef FUNCTION_POINTERS_H
#define FUNCTION_POINTERS_H

#include <unistd.h>
#include <stdio.h>

int _putchar(char c);
void print_name(char *name, void (*f)(char *));
void array_iterator(int *array, size_t size, void (*action)(int));
int int_index(int *array, int size, int (*cmp)(int));
int (*get_op_func(char *s))(int, int);

#endif /** "FUNCTION_POINTERS_H"  **/
